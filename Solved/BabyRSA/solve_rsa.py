#!/usr/bin/env python3
import gmpy2

# we have: n, e, c, p, q
p = 2**1023 + 1155
q = 2**1024 + 643
n = p*q
e = 65537
c = 2426759448926300374092713562742363835064624596734803758771558596637476435050549322291385219226509562405891022145248939846259187578407323336264977796035006051101456740659780915043839753835115842400821067812149630208916162819303078177680527198216553101252744997907265952123874930177443569829481627316683242014717052901748219013647067408530007363343371724907285664511595816386074309444579803282707739982294866598538682087302380145036139213779079021485602590035788284515090342916438525807114219193157567634647634786348429443139872928990365019329208810611558637131836578485907804972498521065186490984311407009061159731115

# Compute phi
phi = (p-1) * (q-1)

# Compute modular inverse of e
d = gmpy2.invert(e, phi)

# Decrypt ciphertext
pt = pow(c, d, n)
try:
    pt = bytes.fromhex(hex(pt)[2:])
except:
    pt = bytes.fromhex('0' + hex(pt)[2:])

print(pt)
